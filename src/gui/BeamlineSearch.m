function varargout = BeamlineSearch(varargin)
%
% BEAMLINESEARCH Graphical user interface (GUI) for searching the Lucretia
%    beamline.
%
% [stat,MinS,MaxS,Class,Name,Direction,Count] = BeamlineSearch(MinS, MaxS,
%    Class, Name, Direction, Count) gets information from the user on the
%    desired search, which is implemented in the BeamlineViewer GUI.  The
%    input arguments are all optional, and are used to pass the most recent
%    search data from previous searches to the GUI; the return arguments
%    are used to indicate the minimum and maximum S positions to be
%    considered, the Class and Name to be searched, the direction (forwards
%    or backwards from the currently selected item in the Beamline Viewer),
%    and the count (find the next item or find all items which meet the
%    search criteria).
%
% See also:  BeamlineViewer.
%
% Version date:  04-May-2007.
%

% Last Modified by GUIDE v2.5 04-May-2007 10:07:30

%==========================================================================
% 
% Untouchable initialization code generated by Matlab GUIDE
%
%==========================================================================

% Begin initialization code - DO NOT EDIT

gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @BeamlineSearch_OpeningFcn, ...
                   'gui_OutputFcn',  @BeamlineSearch_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

% End initialization code - DO NOT EDIT

%==========================================================================
%==========================================================================
%==========================================================================
%==========================================================================
%==========================================================================

%==========================================================================
%
% Auto-generated functions which are hand-modified for use in this GUI
%
%==========================================================================

function BeamlineSearch_OpeningFcn(hObject, eventdata, handles, varargin)
%
% This function executes just before the GUI is made visible.
%
% Input arguments:
%   hObject    handle to figure
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)
%   varargin   command line arguments to BeamlineSearch (see VARARGIN)

% Choose default command line output for BeamlineSearch -- by default, bad
% status is set

  handles.output = 0;

% first argument, if any, is the element class

  if (length(varargin)>=1)
      SearchClass = varargin{1} ;
      handles.Class = SearchClass ;
  else
      SearchClass = [] ;
  end
  
% second argument, if any, is the element name  
  
  if (length(varargin)>=2)
      SearchName = varargin{2} ;
      handles.Name = SearchName ;
  else
      SearchName = [] ;
  end

% third and fourth arguments, if any, are the min and max S positions

  if (length(varargin)>=3)
      SearchMinS = varargin{3} ;
      handles.MinS = SearchMinS ;
  else
      SearchMinS = [] ;
  end
  if (length(varargin)>=4)
      SearchMaxS = varargin{4} ;
      handles.MaxS = SearchMaxS ;
  else
      SearchMaxS = [] ;
  end
  
% fifth and sixth arguments are the search direction and the number of
% items to be found
  
  if (length(varargin)>=5)
      handles.Direction = varargin{5} ;
  else
      handles.Direction = 1 ;
  end
  if (length(varargin)>=6)
      handles.Count = varargin{6} ;
  else
      handles.Count = 1 ;
  end

% now plug those values into the handles data structure  
  
  set(handles.SearchClass,'String',SearchClass) ;
  set(handles.SearchName,'String',SearchName) ;
  set(handles.SearchMinSPos,'String',num2str(SearchMinS)) ;
  set(handles.SearchMaxSpos,'String',num2str(SearchMaxS)) ;
  if (handles.Direction == 1)
      set(handles.BeamlineSearchForward,'Value',1) ;
      set(handles.BeamlineSearchReverse,'Value',0) ;
  else
      set(handles.BeamlineSearchForward,'Value',0) ;
      set(handles.BeamlineSearchReverse,'Value',1) ;
  end
  if (handles.Count == 1)
      set(handles.SearchNext,'Value',1) ;
      set(handles.SearchAll,'Value',0) ;
  else
      set(handles.SearchNext,'Value',0) ;
      set(handles.SearchAll,'Value',1) ;
  end
  
% for no reason I can fathom, Matlab is not auto-setting the selection
% change functions for the button groups, so do that manually here:
  
  set(handles.SearchDirection,'SelectionChangeFcn',...
  'BeamlineSearch(''Direction_SelectionChangeFcn'',gcbo,[],guidata(gcbo))') ;

  set(handles.SearchQuantity,'SelectionChangeFcn',...
  'BeamlineSearch(''Quantity_SelectionChangeFcn'',gcbo,[],guidata(gcbo))') ;

% Update handles structure

  guidata(hObject, handles);

% UIWAIT makes BeamlineSearch wait for user response (see UIRESUME)

  uiwait(handles.figure1);

%==========================================================================

function varargout = BeamlineSearch_OutputFcn(hObject, eventdata, handles)
%
% Function which sets up the return variables for the BeamlineSearch GUI
%
% Output arguments:
%   varargout  cell array for returning output args (see VARARGOUT); the
%              arguments are:
%              varargout{1}  status (1==good, 0==bad)
%              varargout{2}  min S value or [] for no min S limit
%              varargout{3}  max S value or [] for no max S limit
%              varargout{4}  element class or [] for no limits
%              varargout{5}  element name or [] for no limits
%              varargout{6}  search direction (1==forward, 2==reverse)
%              varargout{7}  count (1==find next, Inf==find all)
%
% Input arguments:
%   hObject    handle to figure
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  if (isempty(handles)) % if user closed the dialog box, for example...
    handles.output = 0 ;
  end
  varargout{1} = handles.output;
  if (varargout{1} ~= 0) % don't cancel, instead parse results
    
    if (isfield(handles,'MinS'))
      varargout{2} = handles.MinS ;
    else
      varargout{2} = [] ;
    end
    if (isfield(handles,'MaxS'))
      varargout{3} = handles.MaxS ;
    else
      varargout{3} = [] ;
    end
    if (isfield(handles,'Class'))
      varargout{4} = handles.Class ;
    else
      varargout{4} = [] ;
    end
    if (isfield(handles,'Name'))
      varargout{5} = handles.Name ;
    else
      varargout{5} = [] ;
    end
    if (isfield(handles,'Direction'))
      varargout{6} = handles.Direction ;
    else
      varargout{6} = 1 ;
    end
    if (isfield(handles,'Count'))
      varargout{7} = handles.Count ;
    else
      varargout{7} = 1 ;
    end
  
  else % cancel or bad status exit
      
    varargout{2} = [] ;
    varargout{3} = [] ;
    varargout{4} = [] ;
    varargout{5} = [] ;
    varargout{6} = [] ;
    varargout{7} = [] ;
    
  end
  
% delete the figure  
  
  if (isfield(handles,'figure1'))
    delete(handles.figure1) ;
  end

%==========================================================================

function SearchClass_Callback(hObject, eventdata, handles)
%
% React to user typing something in the Class text window.
% Input arguments:
%   hObject    handle to SearchClass (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  handles.Class = get(hObject,'String') ;
  guidata(hObject,handles) ;

%==========================================================================

function SearchClass_CreateFcn(hObject, eventdata, handles)
%
% Create the Search text box.
% Input arguments:
%   hObject    handle to SearchClass (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    empty - handles not created until after all CreateFcns
%   called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.

  if ispc && isequal(get(hObject,'BackgroundColor'), ...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
  end

%==========================================================================

function SearchName_Callback(hObject, eventdata, handles)
%
% React to user typing something in the Name text box.
% Input arguments:
%   hObject    handle to SearchName (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  handles.Name = get(hObject,'String') ;
  guidata(hObject,handles) ;

%==========================================================================

function SearchName_CreateFcn(hObject, eventdata, handles)
%
% Create the Search text box.
% Input arguments:
%   hObject    handle to SearchClass (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    empty - handles not created until after all CreateFcns
%   called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.

  if ispc && isequal(get(hObject,'BackgroundColor'), ...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
  end

%==========================================================================

function SearchMinSPos_Callback(hObject, eventdata, handles)
%
% React to user typing something in the MinS text box.
% Input arguments:
%   hObject    handle to SearchName (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  handles.MinS = get(hObject,'String') ;
  guidata(hObject,handles) ;

%==========================================================================

function SearchMinSPos_CreateFcn(hObject, eventdata, handles)
%
% Create the MinS text box.
% Input arguments:
%   hObject    handle to SearchClass (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    empty - handles not created until after all CreateFcns
%   called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.

  if ispc && isequal(get(hObject,'BackgroundColor'), ...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
  end

%==========================================================================

function SearchMaxSpos_Callback(hObject, eventdata, handles)
%
% React to user typing something in the MinS text box.
% Input arguments:
%   hObject    handle to SearchName (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  handles.MaxS = get(hObject,'String') ;
  guidata(hObject,handles) ;

%==========================================================================

function SearchMaxSpos_CreateFcn(hObject, eventdata, handles)
%
% Create the MaxS text box.
% Input arguments:
%   hObject    handle to SearchClass (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    empty - handles not created until after all CreateFcns
%   called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
  if ispc && isequal(get(hObject,'BackgroundColor'), ...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
  end

%==========================================================================

function BeamlineSearchDo_Callback(hObject, eventdata, handles)
%
% React to user pressing the "Search" button.
% Input arguments:
%   hObject    handle to BeamlineSearchDo (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  handles.output = 1 ;
  guidata(hObject,handles) ;
  uiresume ;

%==========================================================================

function BeamlineSearchCancel_Callback(hObject, eventdata, handles)
%
% React to user pressing the "Cancel" button.
% Input arguments:
%   hObject    handle to BeamlineSearchDo (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  handles.output = 0 ;
  guidata(hObject,handles) ;
  uiresume ;

%==========================================================================
%==========================================================================
%==========================================================================
%==========================================================================
%==========================================================================

%==========================================================================
%
% Now for the two user-written functions which manage the button groups:
%
%==========================================================================

function Direction_SelectionChangeFcn(hObject, eventdata, handles)
%
% Handles selecting the "Forward" or "Reverse" buttons
% Input arguments:
%   hObject    handle to BeamlineSearchDo (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  switch get(hObject,'Tag')
    case('BeamlineSearchForward')
        handles.Direction = 1 ;
    case('BeamlineSearchReverse')
        handles.Direction = -1 ;
  end
  guidata(hObject,handles) ;

%==========================================================================

function Quantity_SelectionChangeFcn(hObject, eventdata, handles)
%
% Handles selecting the "Next" or "All" buttons
% Input arguments:
%   hObject    handle to BeamlineSearchDo (see GCBO)
%   eventdata  reserved - to be defined in a future version of MATLAB
%   handles    structure with handles and user data (see GUIDATA)

  switch get(hObject,'Tag')
    case('SearchNext')
        handles.Count = 1 ;
    case('SearchAll')
        handles.Count = Inf ;
  end
  guidata(hObject,handles) ;

