classdef F2_IN10GunWatcherApp < handle
  events
    PVUpdated % PV object list notifies this event after each set of monitored PVs have finished updating
  end
  properties
    pvlist PV
    pvs
    guihan
  end
  properties(Hidden)
    listeners
  end
  properties(Constant)
    maxbeat=1e7 % max heartbeat count, wrap to zero
    triglevel=0.2 % trigger level on scope / V
    nwav uint16 = 200 % number of waveform points on scope to use
  end
  methods
    function obj = F2_IN10GunWatcherApp(apph)
      context = PV.Initialize(PVtype.EPICS) ;
      obj.pvlist=[...
        PV(context,'name',"State",'pvname',"SIOC:SYS1:ML00:AO843",'mode',"rw",'monitor',true); % Watcher state -1 OFF, 0 no error, 1 Gun FPWR error, 2 scope tarce derived error
        PV(context,'name',"MaxPwr",'pvname',"SIOC:SYS1:ML00:AO844",'mode',"rw",'monitor',true); % Max forward gun power
        PV(context,'name',"Enable",'pvname',"SIOC:SYS1:ML00:AO845",'mode',"rw",'monitor',true); % Watcher enable state 0 = OFF 1 = ON
        PV(context,'name',"Heartbeat",'pvname',"SIOC:SYS1:ML00:AO846",'mode',"rw"); % Watcher heartbeat
        PV(context,'name',"pconv",'pvname',"SIOC:SYS1:ML00:AO847",'mode',"rw",'monitor',true); % V:MW conversion factor
        PV(context,'name',"GunPowerWFout",'pvname',"SIOC:SYS1:ML00:AO848",'mode',"rw",'monitor',true); % PV to write forward power calc from waveform
        PV(context,'name',"GunFwdPwr",'pvname',"KLYS:LI10:21:FE_PWR",'monitor',true); % Forward gun power
        PV(context,'name',"ScopeTriggerWF",'pvname',"SCOP:IN10:FC01:WF_CH2_TRACE",'monitor',true); % Laser trigger signal on scope / V
        PV(context,'name',"GunPowerWF",'pvname',"SCOP:IN10:FC01:WF_CH0_TRACE",'monitor',true); % Gun cavity power signal on scope / V
        PV(context,'name',"GunRFcntrl",'pvname',"KLYS:LI10:21:OUTPUTENBL",'mode',"rw"); % Low-level RF control for 10-2
        PV(context,'name',"GunRF",'pvname',"KLYS:LI10:21:OUTPUTENBL.RVAL",'monitor',true); % Low-level RF readback for 10-2
        ] ;
      pset(obj.pvlist,'debug',0) ;
      obj.pvs = struct(obj.pvlist) ;
      if exist(apph,'var') && ishandle(apph)
        obj.guihan=apph;
        obj.pvs.Enable.guihan = apph.EnableCheckBox ;
        obj.pvs.GunRF.guihan = apph.GunRFONCheckBox ;
        obj.pvs.MaxPwr.guihan = apph.MaxPWRMWEditField ;
        obj.pvs.State.guihan = apph.StateEditField ;
        obj.pvs.Heartbeat.guihan = apph.HeartbeatEditField ;
        obj.pvs.pconv.guihan = apph.PowerConversionVMWEditField ;
        obj.pvs.GunFwdPwr.guihan = [apph.EditField, apph.GunPwrPVMWGauge] ;
        obj.pvs.GunPowerWFout.guihan = [apph.EditField_2, apph.GunPwrPVMWGauge_2] ;
      end
      obj.listeners = addlistener(obj,'PVUpdated',@(~,~) obj.wdfun) ;
      run(obj.pvlist,true,0.1,obj,'PVUpdated');
    end
    function wdfun(obj)
      %WDFUN Watchdog function calls when PV values change
      persistent lastmax
      
      % Update limits on GUI gauge if GUI showing
      if ~isempty(obj.guihan) && (isempty(lastmax) || lastmax~=obj.pvs.MaxPwr.val{1})
        lastmax=obj.pvs.MaxPwr.val{1};
        obj.guihan.GunFwdPwr.limits = [0 obj.pvs.MaxPwr.val{1}];
        obj.guihan.GunPowerWFout.limits = [0 obj.pvs.MaxPwr.val{1}];
      end
      
      % Update heartbeat
      if obj.pvs.Heartbeat.val{1} >= obj.maxbeat
        caput(obj.pvs.Heartbeat,1);
      else
        caput(obj.pvs.Heartbeat,obj.pvs.Heartbeat.val{1}+1);
      end
      
      % If enable flag set to zero, do nothing
      if obj.pvs.Enable.val{1} == 0
        return;
      end
      
      % Check forward Gun RF power readout from PV
      if obj.pvs.GunFwdPwr.val{1} > obj.pvs.MaxPwr.val{1} % disable RF if power level too high
        fprintf('%s (F2_IN10GunWatcher) Gun FWD power PV exceeds limits: %g > %g MW\n',datestr(now),obj.pvs.GunFwdPwr.val{1},obj.pvs.MaxPwr.val{1});
        caput(obj.pvs.State,1);
%         caput(obj.pvs.GunRFcntrl,0);
      elseif obj.pvs.GunRF.val{1}==1
        caput(obj.pvs.State,0);
      end
      if obj.pvs.Enable.val{1} == 1 % if just checking RF pV, then done here
        return
      end
      
      % Check Gun cavity power from scope waveforms
      trigV = max(abs(obj.pvs.ScopeTriggerWF.val{1}(1:obj.nwav))) ;
      powerMW = max(abs(obj.pvs.GunPowerWF.val{1}(1:obj.nwav))) * obj.pvs.pconv.val{1} ;
      caput(obj.pvs.GunPowerWFout,powerMW);
      if trigV > obj.triglevel && powerMW > obj.pvs.MaxPwr.val{1}
        fprintf('%s (F2_IN10GunWatcher) Gun FWD power exceeds limits (from scope waveform): %g > %g MW\n',datestr(now),powerMW,obj.pvs.MaxPwr.val{1});
        caput(obj.pvs.State,2);
%         caput(obj.pvs.GunRFcntrl,0);        
      elseif obj.pvs.GunRF.val{1}==1
        caput(obj.pvs.State,0);
      end
      
      
      
    end
  end
end