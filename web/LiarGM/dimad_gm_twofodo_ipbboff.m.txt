%================================================================
%  Simple FODO line with ground motion
%  MAT-LIAR simulation
%     Two fodo lines pointing to each other
%       Calculate rms of beam-beam offset at IP for several T
%        Invoke DIMAD tracking instead of pure LIAR tracking
%
%  A.S. Dec.29, 2001
%================================================================

%  Initialize LIAR with FODO beamline
%
init_fodo12dimad
%
% Number of iterations to average each sample
niter=64;
tsample=[0.0 0.001 0.003 0.01 0.03 0.1 0.3 1.0 3.0 10. 30. 100. ];
nsample=length(tsample);
%
% Settings for getting the beam parameters.
[ierr,sbpm1] = mat_liar('MAT_INFO_BPMS');
sbpm2 = sbpm1;
nbpm=length(sbpm1);
bpm_indx=nbpm;
nbpm=1;
mat_liar('MAT_INIT_XBPM',nbpm,bpm_indx);
mat_liar('MAT_INIT_YBPM',nbpm,bpm_indx);
% Empty arrays for storing the data.
bpmrx=zeros(2,nsample,niter);
bpmry=zeros(2,nsample,niter);
beamx=zeros(2,nsample,niter);
beamy=zeros(2,nsample,niter);
mislx=zeros(2,nsample,niter);
misly=zeros(2,nsample,niter);
%
% Set up the ground motion model 
mat_liar('define_gm_model,');
mat_liar('pwkfile = ''gm_model_B2.data'' , Tmin = 0.001, Tmax = 100. ');
mat_liar('print_pwk_param');
%
%
% Set up BPM resolution, no other errors.
mat_liar('error_gauss_bpm, name = ''*'','); % Name to be matched
mat_liar('x_sigma = 0.e-6,  '); % Sigma misalignment
mat_liar('x_cut   = 3,      '); % Cut for Gaussian  
mat_liar('y_sigma = 0.e-6,  '); % Sigma misalignment
mat_liar('y_cut   = 3,      '); % Cut for Gaussian
mat_liar('resol = 1.0e-15,  '); % bpm res, meters
mat_liar('reset = .t.       '); % reset previous misalignm.
%
%
mat_liar('prepare_gm_harmonics');
mat_liar('set_gm_abs_time, timeabs = 0  ');
mat_liar('gm_move, dt = 0.0, reset=.t. ');
%
%
% loop over iterations, each time will refresh harmonics
%
for iter=1:niter
%
%
% Random seed for GM model
sdstr=['seed = ',num2str(round(abs(randn(1,1)*1000000)))];
%
%
%  Loop over beamlines (1 or 2)
for ibeam=1:2 
%
liarstr= ['seed_gm_random_gen, ',sdstr];
mat_liar(liarstr);
%
mat_liar('refresh_gm_harmonics');
mat_liar('set_gm_abs_time, timeabs = 0  ');
mat_liar('gm_move, dt = 0.0, reset=.t. ');
%
% Use DIMAD for tracking
mat_liar('  dimad_tracking_setup, seed = 11, ');
mat_liar('  start_dimad_element = ''BEGINDM'', num_rays = 10000 ');
%
mat_liar('  track, dolog = .f. ');
% Get initial beam parameters and logbook, without misalignment
mat_liar('logbook, process = .f.,');
mat_liar('print = .f.');
%
[iss,bpmrx(ibeam,1,iter),bpmry(ibeam,1,iter)] = mat_liar('MAT_GET_BPMR',nbpm); % BPM reading (includes random resolution)
[iss,beamx(ibeam,1,iter),beamy(ibeam,1,iter)] = mat_liar('MAT_GET_BPMS',nbpm); % absolute position of the beam
[iss,mislx(ibeam,1,iter),misly(ibeam,1,iter)] = mat_liar('MAT_GET_BPMD',nbpm); % misalignments of BPMs
%
for isample=2:nsample
    dtsample=tsample(isample)-tsample(isample-1);
    dtstr=num2str(dtsample);
    if ibeam == 1
        gmstr1=['gm_move, dt = ',dtstr,' , flips = .f. ']; 
    else
        gmstr1=['gm_move, dt = ',dtstr,' , flips = .t. '];
    end
    gmstr2=['increase_gm_abs_time, dtime = ',dtstr]
    mat_liar(gmstr1); 
    mat_liar(gmstr2); 
 %
 % dolog=.t. may cause liar to crash if number of iterations will be too big
 % (more than NSEED_MAX defined in definitions_mod.f )
 %
 % Use DIMAD for tracking
 mat_liar('  dimad_tracking_setup, seed = 11, ');
 mat_liar('  start_dimad_element = ''BEGINDM'', num_rays = 10000 ');
 %
  mat_liar('  track, dolog = .f. ');
    [iss,bpmrx(ibeam,isample,iter),bpmry(ibeam,isample,iter)] = mat_liar('MAT_GET_BPMR',nbpm);
    [iss,beamx(ibeam,isample,iter),beamy(ibeam,isample,iter)] = mat_liar('MAT_GET_BPMS',nbpm);
    [iss,mislx(ibeam,isample,iter),misly(ibeam,isample,iter)] = mat_liar('MAT_GET_BPMD',nbpm);
end % loop of isample
%
end % loop of ibeam (1 or 2)
%
end % loop of iter
%
% Save the logbook
%mat_liar('logbook, process = .t.,');
%mat_liar('print = .t.');
%
%

% Save output in Matlab format
clear ibeam ierr isample iss iter gmstr1 gmstr2 dtsample dtstr
save dimad_gm_twofodo_ipbboff_save
%
